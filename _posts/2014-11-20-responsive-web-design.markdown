---
layout: post
Title: "Do you think the response is good, or is it separated from the mobile phone and the PC side?"
Date: 2014-11-20 12:00:00
Author: "Ishan"
header-img: "IMG/Post-BG-rwd.jpg"
tags:
     - Know almost
     -WEB
---

> This article is reproduced from [My Answer on Zhihu] (http://www.zhihu.com/question/25836425/answer/31564174)


<div>
<p>
<b> According to your product characteristics, two different designs, </b>
<br> <b> According to your design needs, choose the right technical solution </b>.
     </p>
     <br> <b> A and B are not the front and back of the coin. They are born to solve the same problem. They are extension of the same thought. </b>
     <br>
     <br>
     The difference between <blockquote> mobile and desktop design is far more than just layout. As long as there is sufficient programming amount, these differences can be solved by a responsive design. In fact, you can think that if one design cannot take into account the main differences between the two platforms, it cannot be regarded as a qualified response design. However, if we really want to deal with all the differences between the platform, we return to the origin: two different designs.
         <br>
         <br> - "Mobile USABILITY"
     <br>
     <br> In fact, no matter what solution is, let's take a look at the problems we want to solve:
     <br>
     <br> <b> "There are more and more screen size, and the interactive characteristics of different devices are also huge. We hope that our website can There are excellent user experience. Therefore, we need the user interface of the website to be different on different platforms. "</B>
     <br>
     <br>
     <br> What do you do? A solution came into being:
     <br>
     <br>
     <ul>
         <li> <b> Responsive Web Design </b>
         </li>
     </ul> <b> In the narrow sense </b>, we mainly rely on the front end CSS </b> (including the Media Query media inquiry, percentage stream layout, grid and Typography system ...) The scalp size of the screen is called a response layout, also known as adaptive web design, or elastic design.
     <br>
     <br> This kind of solution that mainly relies on CSS has many advantages, such as:
     <br>
     <ul>
         <ul>
             <li> Design elements are easy to be reused, and the design cost is low </li>
             <li> The front end only needs to maintain a set of CSS code, <b> maintenance cost </b> low </li>
             <li> The design of the desktop end to the mobile end is very close, making users feel "familiar" </li>
             <li> No support from the server side </li>
             <li> Low business coupling, high degree of reuse (so that a dry framework such as Bootstrap, Foundation has followed up this solution) </li>
         </ul>
     </ul> But the problem is also obvious, such as:
     <br>
     <ul>
         <ul>
             <li> When the design demand is complicated, the <b> development cost </b> of the front end is not reduced </li>
             <li> Whether it is a desktop or a mobile CSS code (or even picture resource files), it will be downloaded to the client by the same (<b> network optimization of the mobile terminal </b>) </b>) </li>
             <li> If JS does not write two sets, it is difficult to make differences between the interaction of the desktop side and the mobile terminal </li>
         </ul>
     </ul>
     <br>
     <br> If <b> your </b> <b> mobile user has the same needs as the function and content of the website </b> The special page and other websites that focus on information transmission and light interaction </b>, then this solution is actually just right:
     <br> <b> Touch screen optimization (fat finger), reduce secondary information ... These are enough to solve them through CSS. </b>
     <br>
     <br>
     <br> <b> But if I want to do more "mobile designs", such as reducing information levels, enhancing gesture operations, making web pages closer to a Native APP? </b>
     <br>
     <br> Okay, for more complicated needs, for our website, <b> "response" </b> each platform,
     <br> There are these solutions again:
     <br>
     <br>
     <br>
     <ul>
         <li> <b> server side (back end): </b>
             <br>
         </li>
         <ul>
             <li> Responsive Web Design with Server Side Components) The responsive web design of the server -side component </li> </li>
         </ul>
     </ul> People who advocate RESS believe that: the response solution based on the front -end CSS is just a compromise:
     <br> <b> "UI is just" adjusting "very passively, and cannot really achieve the optimal of each platform. A good design should reach "Device Experiences". "</B>
     <br>
     <blockquote> <b> Device Experiences: </b> A Device Experience Is Defined by How A Device is Most Commonly used and the technical capabilities or life The essence of S it PosseSSSSSES. </Blockquote> RESS is still generated by the server. HTML, JS, CSS, image and other resource files, but only the same URL can be provided to the mobile terminal to customize a stronger web pages, and also greatly saves network resources.
     <br>
     <br>
     <br>
     <ul>
         <li> <b> front end </b> (mainly JS), for example:
             <br>
         </li>
         <ul>
             <li> Implement two sets of logic in JavaScript, compatible with key mouse, touch equipment </li>
             <li> Through UA, characteristic detection at the front end, make equipment judgment, carry out asynchronous loading resources, and render different templates </li>
             <li> Through feature detection to make equipment judgments at the front end, use different business logic </li>
             <li> The modularization of the front end can also help solve this problem, such as loading different modules for different platforms </li>
             <li> ... </li>
         </ul>
     </ul>
     <br>
     <br> This time, our website can be more powerful <b> "response" </b> each platform.
     <br> (Yes, I still call it response: This is indeed <b> "response" </b>, isn't it?)
     <br>
     <br>
     <br> <b> But wait ... </b>
     <br> The back -end development cost has been up, and the front -end development cost has also been up. With the estimated products and design resources, <b> Then why not simply separate the mobile device website and desktop device website! Intersection </b>
     <br>
     <br>
     <br> Yeah, if your needs are really here, your mobile website should also be called WebApp. <b> At this time, it may be a better choice to completely separate the mobile device website. </b>
     <br>
     <br> Development resources are so sufficient, you can also let special teams maintain the mobile website.
     <br> (Well, BAT is doing this)
     <br>
     <br> So another concept came:
     <br>
     <br>
     <ul>
         <li> <b> Independent mobile version of the website </b> (According to the subject of the subject: the mobile phone and the PC side are written separately) </li>
     </ul> But is it so independent?
     <br> We know that we visit the website through URL.
     <br> Separate mobile websites from desktop websites. If you do not use RESS technology, it often means to maintain two URLs (different secondary domain names)
     <br> Do we want to let all desktop users consciously visit <a href="http://taobao.com" class=" external" target="_blank" rel="nofollow noreferrer"> <span class = "inf"> "Invisible"> http: // </span> <span class = "visible"> taobao.com </span> <span class = "inf"> </span> <i class = "icon-External"> </i> < /A>, all mobile users consciously visit <a href="http://m.taobao.com" class=" external" target="_blank" rel="nofollow noreferrer"> <span class = "inf" in "infle"> http: // </span> <span class = "visible"> m.taobao.com </span> <span class = "inf"> </span> <i class = "icon-External"> </i > </a>?
     <br>
     <br> It is impossible = =.
     <br>
     <br> Therefore, we still have to rely on a <b> "response" </b> (device detection) on the front or server side, and make URL redirects to bring users of different devices to the website prepared for them.
     <br>
     <br>
     <br>
     <br> <b> So in my opinion, the mobile phone and the PC side are written separately, but it is just a kind of development and extension of narrow response design. Their boundaries are not so clear. </b>
     <br>
     <br> As cited in the opening question:
     <br>
     <blockquote> <b> In fact, you can think that if a design cannot take into account the main differences between the two platforms, it cannot be regarded as a qualified response design. </b>
     </blockquote> <b> "No matter what solutions are used." - This sentence is me. </b>
     <br>
     <br>
     <br>
     <br>
     <br> Therefore, my conclusion is:
     <br>
     <br> <b> This is not a two -choice problem, but to choose a suitable degree </b> (the degree of separation and coupling of your desktop version code from the mobile version code)
     <br>
     <br> This degree is determined by your design needs.
     <br> The origin of our demand is actually very simple:
     <br>
     <br> "<b> Make two different designs according to your product characteristics </b>".
     <br>
     <br>
     <br> above.
     <br>
     <br>
</div>
